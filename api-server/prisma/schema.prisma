generator client {
  provider = "prisma-client-js"
  output   = "../prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity {
  id                    String                 @id @default(cuid())
  creatorId             String?                @map("creator_id")
  title                 String                 @db.Text
  description           String?
  startDate             DateTime               @map("start_date") @db.Timestamp(6)
  endDate               DateTime?              @map("end_date") @db.Timestamp(6)
  location              String?                @db.Text
  gpsCoordinates        String?                @map("gps_coordinates")
  maxSpots              Int?                   @map("max_spots")
  categoryId            String?                @map("category_id")
  recurring             Boolean?               @default(false)
  frequency             String?                @db.Text
  reducedMobilityAccess Boolean                @default(false) @map("reduced_mobility_access")
  difficultyLevel       Int?                   @map("difficulty_level")
  cost                  Float?
  status                String?                @db.Text
  weatherRequirements   String?                @map("weather_requirements") @db.Text
  transportOptions      String?                @map("transport_options") @db.Text
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime?              @map("updated_at") @db.Timestamp(6)
  user                  user?                  @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  activityCategory      activityCategory?      @relation(fields: [categoryId], references: [id])
  activity_registration activityRegistration[]
}

model activityLog {
  id          String    @id @default(cuid())
  userId      String?   @map("user_id")
  actionType  String?   @map("action_type") @db.Text
  description String?
  ipAddress   String?   @map("ip_address") @db.Text
  device      String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamp(6)
  user        user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("activity_log")
}

model activityRegistration {
  id                  String    @id @default(cuid())
  activityId          String    @map("activity_id")
  userId              String    @map("user_id")
  registrationDate    DateTime  @map("registration_date") @db.Timestamp(6)
  status              String?   @db.Text
  attendanceConfirmed Boolean?  @default(false) @map("attendance_confirmed")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime? @map("updated_at") @db.Timestamp(6)
  activity            activity  @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("activity_registration")
}

model badge {
  id            String         @id @default(cuid())
  name          String         @db.Text
  categoryId    String?        @unique @map("category_id")
  description   String?        @db.Text
  icon          String?        @db.Text
  level         Int?
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?      @map("updated_at") @db.Timestamp(6)
  userBadge     userBadge?
  badgeCategory badgeCategory? @relation(fields: [categoryId], references: [id])
}

model cognitiveExercise {
  id                String             @id @default(cuid())
  name              String             @db.Text
  categoryId        String?            @map("category_id") // Mémoire, concentration, raisonnement, logique, langage, calcul mental, observation, culture générale
  difficultyLevel   Int?               @map("difficulty_level")
  durationMinutes   Int?               @map("duration_minutes")
  description       String?
  image             String?            @db.Text
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @map("updated_at") @db.Timestamp(6)
  cognitiveCategory cognitiveCategory? @relation(fields: [categoryId], references: [id])
  userActivity      userActivity[]
  programCategory   programCategory?   @relation(fields: [programCategoryId], references: [id])
  programCategoryId String?

  @@map("cognitive_exercise")
}

model collaborativeProject {
  id              String           @id @default(cuid())
  title           String           @db.Text
  description     String?
  creatorId       String           @map("creator_id")
  creationDate    DateTime         @default(now()) @map("creation_date") @db.Timestamp(6)
  status          String?          @db.Text
  categoryId      String?          @map("category_id") @db.Text
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?        @map("updated_at") @db.Timestamp(6)
  user            user?            @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projectCategory projectCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projectMember   projectMember[]
  projectTask     projectTask[]

  @@map("collaborative_project")
}

model conversation {
  id                      String                    @id @default(cuid())
  type                    String                    @db.Text
  title                   String                    @db.Text
  createdAt               DateTime                  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime?                 @map("updated_at") @db.Timestamp(6)
  conversationParticipant conversationParticipant[]
  message                 message[]
  videoCall               videoCall[]
}

model conversationParticipant {
  id             String       @id @default(cuid())
  conversationId String       @map("conversation_id")
  userId         String       @map("user_id")
  dateAdded      DateTime?    @map("date_added") @db.Timestamptz(6)
  administrator  Boolean?
  lastAccess     DateTime     @default(now()) @map("last_access") @db.Timestamp(6)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?    @map("updated_at") @db.Timestamp(6)
  conversation   conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("conversation_participant")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model exerciseProgram {
  id                        String           @id @default(cuid())
  name                      String           @db.Text
  categoryId                String?          @map("category_id")
  difficultyLevel           Int?             @map("difficulty_level")
  adaptedForReducedMobility Boolean?         @map("adapted_for_reduced_mobility")
  durationMinutes           Int?             @map("duration_minutes")
  description               String?
  videoLink                 String?          @map("video_link") @db.Text
  image                     String?          @db.Text
  createdAt                 DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime?        @map("updated_at") @db.Timestamp(6)
  programCategory           programCategory? @relation(fields: [categoryId], references: [id])
  userActivity              userActivity[]

  @@map("exercise_program")
}

model forumCategory {
  id               String       @id @default(cuid())
  name             String       @db.Text
  description      String?      @db.Text
  parentCategoryId String?      @map("parent_category_id")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?    @map("updated_at") @db.Timestamp(6)
  forumTopic       forumTopic[]

  @@map("forum_category")
}

model forumMessage {
  id              String      @id @default(cuid())
  topicId         String      @map("topic_id")
  authorId        String      @map("author_id")
  content         String
  solutionMessage Boolean?    @map("solution_message")
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?   @map("updated_at") @db.Timestamp(6)
  user            user?       @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  forumTopic      forumTopic? @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("forum_message")
}

model forumTopic {
  id            String         @id @default(cuid())
  categoryId    String         @map("category_id")
  authorId      String         @map("author_id")
  title         String         @db.Text
  pinned        Boolean?       @default(false)
  status        String?        @db.Text
  views         Int?           @default(0)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?      @map("updated_at") @db.Timestamp(6)
  forumMessage  forumMessage[]
  user          user           @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  forumCategory forumCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("forum_topic")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model healthIndicator {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  recordingDate        DateTime  @map("recording_date") @db.Date
  stepCount            Int?      @map("step_count")
  sleepDurationMinutes Int?      @map("sleep_duration_minutes")
  sleepQuality         Int?      @map("sleep_quality")
  weight               Float?
  mood                 String?   @db.Text
  notes                String?
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime? @map("updated_at") @db.Timestamp(6)
  user                 user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("health_indicator")
}

model helpOffer {
  id          String      @id @default(cuid())
  requestId   String      @map("request_id")
  helperId    String      @map("helper_id")
  offerDate   DateTime    @map("offer_date") @db.Timestamp(6)
  message     String?
  status      String?     @db.Text
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?   @map("updated_at") @db.Timestamp(6)
  user        user        @relation(fields: [helperId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  helpRequest helpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("help_offer")
}

model helpRequest {
  id                String             @id @default(cuid())
  creatorId         String             @map("creator_id")
  title             String             @db.Text
  description       String?
  neededDate        DateTime           @map("needed_date") @db.Timestamp(6)
  estimatedDuration Int?               @map("estimated_duration")
  location          String?            @db.Text
  gpsCoordinates    String?            @map("gps_coordinates")
  categoryId        String             @map("category_id")
  recurring         Boolean?           @default(false)
  frequency         String?            @db.Text
  status            String?            @db.Text
  pointsOffered     Int?               @default(0) @map("points_offered")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?          @map("updated_at") @db.Timestamp(6)
  helpOffer         helpOffer[]
  user              user               @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  serviceCompleted  serviceCompleted[]
  helpCategory      helpCategory?      @relation(fields: [categoryId], references: [id])

  @@map("help_request")
}

model localService {
  id              String           @id @default(cuid())
  name            String           @db.Text
  categoryId      String           @map("category_id") @db.Text
  address         String?          @db.Text
  gpsCoordinates  String?          @map("gps_coordinates")
  phone           String?          @db.Text
  website         String?          @db.Text
  description     String?
  hours           String?          @db.Text
  seniorFriendly  Boolean?         @map("senior_friendly")
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?        @map("updated_at") @db.Timestamp(6)
  serviceCategory serviceCategory? @relation(fields: [categoryId], references: [id])
  serviceRating   serviceRating[]

  @@map("local_service")
}

model medicationReminder {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  medicationName      String    @map("medication_name") @db.Text
  dosage              String?   @db.Text
  morningReminderTime DateTime? @map("morning_reminder_time") @db.Time(6)
  noonReminderTime    DateTime? @map("noon_reminder_time") @db.Time(6)
  eveningReminderTime DateTime? @map("evening_reminder_time") @db.Time(6)
  nightReminderTime   DateTime? @map("night_reminder_time") @db.Time(6)
  daysOfWeek          String?   @map("days_of_week") @db.Text
  instructions        String?
  active              Boolean?  @default(true)
  startDate           DateTime? @map("start_date") @db.Timestamp(6)
  endDate             DateTime? @map("end_date") @db.Timestamp(6)
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime? @map("updated_at") @db.Timestamp(6)
  user                user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("medication_reminder")
}

model message {
  id             String        @id @default(cuid())
  conversationId String        @map("conversation_id")
  senderId       String        @map("sender_id")
  content        String
  sendDate       DateTime      @map("send_date") @db.Timestamp(6)
  type           String?       @db.Text
  read           Boolean?      @default(false)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?     @map("updated_at") @db.Timestamp(6)
  conversation   conversation? @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user?         @relation(fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model municipalEvent {
  id             String    @id @default(cuid())
  title          String    @db.Text
  description    String?
  startDate      DateTime  @map("start_date") @db.Timestamp(6)
  endDate        DateTime  @map("end_date") @db.Timestamp(6)
  location       String    @db.Text
  gpsCoordinates String?   @map("gps_coordinates")
  organizer      String?   @db.Text
  contact        String?   @db.Text
  officialLink   String?   @map("official_link") @db.Text
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime? @map("updated_at") @db.Timestamp(6)

  @@map("municipal_event")
}

model notification {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  type       String    @db.Text
  content    String
  read       Boolean?
  actionLink String?   @map("action_link") @db.Text
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamp(6)
  user       user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notificationPreferences {
  userId               String    @id @map("user_id")
  messageNotification  Boolean?  @default(false) @map("message_notification")
  activityNotification Boolean?  @default(false) @map("activity_notification")
  helpNotification     Boolean?  @default(false) @map("help_notification")
  forumNotification    Boolean?  @default(false) @map("forum_notification")
  emailNotification    Boolean?  @default(false) @map("email_notification")
  smsNotification      Boolean?  @default(false) @map("sms_notification")
  pushNotification     Boolean?  @default(false) @map("push_notification")
  quietHoursStart      DateTime? @map("quiet_hours_start") @db.Time(6)
  quietHoursEnd        DateTime? @map("quiet_hours_end") @db.Time(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime? @map("updated_at") @db.Timestamp(6)
  user                 user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notification_preferences")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model nutritionalAdvice {
  id                  String               @id @default(cuid())
  title               String               @db.Text
  description         String?
  categoryId          String               @map("category_id")
  season              String?              @db.Text
  image               String?              @db.Text
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?            @map("updated_at") @db.Timestamp(6)
  nutritionalCategory nutritionalCategory? @relation(fields: [categoryId], references: [id])

  @@map("nutritional_advice")
}

model projectMember {
  id                   String               @id @default(cuid())
  projectId            String               @map("project_id")
  userId               String               @map("user_id")
  role                 String               @db.Text
  joinDate             DateTime             @map("join_date") @db.Timestamp(6)
  createdAt            DateTime             @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime?            @map("updated_at") @db.Timestamp(6)
  collaborativeProject collaborativeProject @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                 user                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("project_member")
}

model projectTask {
  id                   String                @id @default(cuid())
  projectId            String                @map("project_id")
  title                String                @db.Text
  description          String?
  creationDate         DateTime              @map("creation_date") @db.Timestamp(6)
  dueDate              DateTime?             @map("due_date") @db.Timestamp(6)
  status               String?               @db.Text
  assigneeId           String?               @map("assignee_id")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime?             @map("updated_at") @db.Timestamp(6)
  user                 user?                 @relation(fields: [assigneeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  collaborativeProject collaborativeProject? @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("project_task")
}

model resource {
  id               String            @id @default(cuid())
  title            String            @db.Text
  content          String?
  type             String            @db.Text
  categoryId       String?           @map("category_id")
  authorId         String            @map("author_id")
  adminValidated   Boolean?          @default(false) @map("admin_validated")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?         @map("updated_at") @db.Timestamp(6)
  user             user?             @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resourceCategory resourceCategory? @relation(fields: [categoryId], references: [id])
}

model satisfactionSurvey {
  id             String           @id @default(cuid())
  title          String           @db.Text
  description    String?
  startDate      DateTime?        @map("start_date") @db.Timestamp(6)
  endDate        DateTime?        @map("end_date") @db.Timestamp(6)
  active         Boolean?         @default(false)
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?        @map("updated_at") @db.Timestamp(6)
  surveyResponse surveyResponse[]

  @@map("satisfaction_survey")
}

model session {
  id           String   @id @default(cuid())
  refreshToken String   @unique
  userId       String
  user         user     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  userAgent    String?
  ipAddress    String?

  @@index([refreshToken])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model serviceCompleted {
  id              String      @id @default(cuid())
  requestId       String      @map("request_id")
  helperId        String      @map("helper_id")
  completionDate  DateTime    @map("completion_date") @db.Timestamp(6)
  actualDuration  Int?        @map("actual_duration")
  creatorComment  String?     @map("creator_comment")
  helperComment   String?     @map("helper_comment")
  creatorRating   Int?        @map("creator_rating")
  helperRating    Int?        @map("helper_rating")
  pointsExchanged Int?        @map("points_exchanged")
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?   @map("updated_at") @db.Timestamp(6)
  user            user        @relation(fields: [helperId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  helpRequest     helpRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("service_completed")
}

model serviceRating {
  id           String       @id @default(cuid())
  serviceId    String       @map("service_id")
  userId       String       @map("user_id")
  rating       Int
  comment      String?
  ratingDate   DateTime?    @map("rating_date") @db.Timestamp(6)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?    @map("updated_at") @db.Timestamp(6)
  localService localService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // @@id([serviceId, userId])
  @@map("service_rating")
}

model skill {
  id            String         @id @default(cuid())
  name          String         @db.Text
  description   String?        @db.Text
  categoryId    String?        @map("category_id")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?      @map("updated_at") @db.Timestamp(6)
  skillCategory skillCategory? @relation(fields: [categoryId], references: [id])
  userSkill     userSkill[]
}

model surveyResponse {
  id                 String             @id @default(cuid())
  surveyId           String             @map("survey_id")
  userId             String             @map("user_id")
  responses          Json?
  responseDate       DateTime?          @default(now()) @db.Timestamp(6)
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?          @map("updated_at") @db.Timestamp(6)
  satisfactionSurvey satisfactionSurvey @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               user               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("survey_response")
}

model trustCircle {
  userId      String    @map("user_id")
  contactId   String    @map("contact_id")
  dateAdded   DateTime  @map("date_added") @db.Date
  accessLevel String    @map("access_level") @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamp(6)

  @@id([userId, contactId])
  @@map("trust_circle")
}

/// This table contains check constraStrings and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model trustedContact {
  id                      String    @id @default(cuid())
  userId                  String    @map("user_id")
  firstName               String    @map("first_name") @db.Text
  lastName                String    @map("last_name") @db.Text
  email                   String?   @unique @db.Text
  phone                   String    @db.Text
  relationship            String?   @db.Text
  shareMedications        Boolean   @default(false) @map("share_medications")
  shareHealthIndicators   Boolean   @default(false) @map("share_health_indicators")
  shareWellnessActivities Boolean   @default(false) @map("share_wellness_activities")
  emergencyAlerts         Boolean   @default(false) @map("emergency_alerts")
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime? @map("updated_at") @db.Timestamp(6)
  user                    user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("trusted_contact")
}

model urbanIssueReport {
  id             String         @id @default(cuid())
  userId         String         @map("user_id")
  categoryId     String?        @map("category_id")
  description    String
  address        String         @db.Text
  gpsCoordinates String?        @map("gps_coordinates")
  reportDate     DateTime       @map("report_date") @db.Timestamp(6)
  status         String?        @db.Text
  cityReference  String?        @map("city_reference") @db.Text
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?      @map("updated_at") @db.Timestamp(6)
  user           user?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  issueCategory  issueCategory? @relation(fields: [categoryId], references: [id])

  @@map("urban_issue_report")
}

model user {
  id                      String                    @id @default(cuid())
  email                   String                    @unique @db.Text
  passwordHash            String                    @map("password_hash") @db.Text
  firstName               String?                   @map("first_name") @db.Text
  lastName                String?                   @map("last_name") @db.Text
  birthDate               DateTime?                 @map("birth_date") @db.Date
  address                 String?                   @db.Text
  gpsCoordinates          String?                   @map("gps_coordinates")
  phone                   String?                   @db.Text
  profilePicture          String?                   @map("profile_picture") @db.Text
  registrationDate        DateTime                  @default(now()) @map("registration_date") @db.Timestamp(6)
  accountVerified         Boolean                   @default(false) @map("account_verified")
  interfacePreferences    String?                   @map("interface_preferences") @db.Text
  twoFactorAuthentication Boolean                   @default(false) @map("two_factor_authentication")
  helpPoints              Int?                      @default(0) @map("help_points")
  reducedMobility         Boolean?                  @default(false) @map("reduced_mobility")
  activityLevel           String?                   @default("active") @map("activity_level") @db.Text
  status                  String?                   @default("active") @db.Text
  createdAt               DateTime                  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime?                 @map("updated_at") @db.Timestamp(6)
  activity                activity[]
  activityLog             activityLog[]
  activityRegistration    activityRegistration[]
  collaborativeProject    collaborativeProject[]
  conversationParticipant conversationParticipant[]
  forumMessage            forumMessage[]
  forumTopic              forumTopic[]
  healthIndicator         healthIndicator[]
  helpOffer               helpOffer[]
  helpRequest             helpRequest[]
  medicationReminder      medicationReminder[]
  message                 message[]
  notification            notification[]
  notificationPreferences notificationPreferences?
  projectMember           projectMember[]
  projectTask             projectTask[]
  resource                resource[]
  serviceCompleted        serviceCompleted[]
  serviceRating           serviceRating[]
  surveyResponse          surveyResponse[]
  trustedContact          trustedContact[]
  urbanIssueReport        urbanIssueReport[]
  userActivity            userActivity[]
  userBadge               userBadge[]
  userDevice              userDevice[]
  userSkill               userSkill[]
  userStatistics          userStatistics?
  videoCall               videoCall[]
  wellnessGoal            wellnessGoal[]
  session                 session[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model userActivity {
  id                       String             @id @default(cuid())
  userId                   String             @map("user_id")
  completionDate           DateTime           @map("completion_date") @db.Date
  exerciseProgramId        String?            @map("exercise_program_id")
  cognitiveExerciseId      String?            @map("cognitive_exercise_id")
  durationMinutes          Int?               @map("duration_minutes")
  perceivedDifficultyLevel Int?               @map("perceived_difficulty_level")
  enjoymentLevel           Int?               @map("enjoyment_level")
  comment                  String?
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime?          @map("updated_at") @db.Timestamp(6)
  cognitiveExercise        cognitiveExercise? @relation(fields: [cognitiveExerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exerciseProgram          exerciseProgram?   @relation(fields: [exerciseProgramId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                     user               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_activity")
}

model userBadge {
  userId          String    @map("user_id")
  badgeId         String    @unique @map("badge_id")
  achievementDate DateTime  @map("achievement_date") @db.Timestamp(6)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @map("updated_at") @db.Timestamp(6)
  badge           badge     @relation(fields: [badgeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, badgeId])
  @@map("user_badge")
}

model userDevice {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  deviceType        String    @map("device_type") @db.Text
  deviceName        String?   @map("device_name") @db.Text
  operatingSystem   String?   @map("operating_system") @db.Text
  notificationToken String    @map("notification_token") @db.Text
  lastConnection    DateTime  @map("last_connection") @db.Timestamp(6)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime? @map("updated_at") @db.Timestamp(6)
  user              user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_device")
}

model userSkill {
  userId     String    @map("user_id")
  skillId    String    @map("skill_id")
  level      Int?
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamp(6)
  skill      skill     @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, skillId])
  @@map("user_skill")
}

model userStatistics {
  userId                 String    @id @map("user_id")
  servicesProvided       Int?      @map("services_provided")
  servicesReceived       Int?      @map("services_received")
  activitiesParticipated Int?      @map("activities_participated")
  activitiesOrganized    Int?      @map("activities_organized")
  forumMessages          Int?      @map("forum_messages")
  totalHelpPoints        Int?      @map("total_help_points")
  networkSize            Int?      @map("network_size")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime? @map("updated_at") @db.Timestamp(6)
  user                   user      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_statistics")
}

model videoCall {
  id             String        @id @default(cuid())
  conversationId String        @map("conversation_id")
  initiatorId    String        @map("initiator_id")
  startDate      DateTime      @map("start_date") @db.Timestamp(6)
  endDate        DateTime      @map("end_date") @db.Timestamp(6)
  status         String        @db.Text
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?     @map("updated_at") @db.Timestamp(6)
  conversation   conversation? @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user?         @relation(fields: [initiatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("video_call")
}

model wellnessBadge {
  id               String            @id @default(cuid())
  name             String            @db.Text
  description      String?
  categoryId       String?           @map("category_id")
  image            String?           @db.Text
  level            Int
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?         @map("updated_at") @db.Timestamp(6)
  wellnessCategory wellnessCategory? @relation(fields: [categoryId], references: [id])

  @@map("wellness_badge")
}

model wellnessGoal {
  id                   String                 @id @default(cuid())
  userId               String                 @map("user_id")
  title                String                 @db.Text
  categoryId           String?                @map("category_id")
  targetValue          Int                    @map("target_value")
  unit                 String                 @db.Text
  frequency            String                 @db.Text
  startDate            DateTime               @map("start_date") @db.Date
  endDate              DateTime               @map("end_date") @db.Date
  active               Boolean                @default(false)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime?              @map("updated_at") @db.Timestamp(6)
  wellnessGoalProgress wellnessGoalProgress[]
  user                 user?                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wellnessCategory     wellnessCategory?      @relation(fields: [categoryId], references: [id])

  @@map("wellness_goal")
}

model wellnessGoalProgress {
  id            String       @id @default(cuid())
  goalId        String       @map("goal_id")
  recordingDate DateTime     @map("recording_date") @db.Date
  achievedValue Int          @map("achieved_value")
  goalAchieved  Boolean      @default(false) @map("goal_achieved")
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?    @map("updated_at") @db.Timestamp(6)
  wellnessGoal  wellnessGoal @relation(fields: [goalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("wellness_goal_progress")
}

// Gestion des catégories diverses et variées
model activityCategory {
  id          String     @id @default(cuid())
  name        String     @db.Text
  description String?    @db.Text
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?  @map("updated_at") @db.Timestamp(6)
  activity    activity[]

  @@map("activity_category")
}

model badgeCategory {
  id          String    @id @default(cuid())
  name        String    @db.Text
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamp(6)
  badge       badge[]

  @@map("badge_category")
}

model cognitiveCategory {
  id                String              @id @default(cuid())
  name              String              @db.Text
  description       String?             @db.Text
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?           @map("updated_at") @db.Timestamp(6)
  cognitiveExercise cognitiveExercise[]

  @@map("cognitive_category")
}

model helpCategory {
  id          String        @id @default(cuid())
  name        String        @db.Text
  description String?       @db.Text
  helpRequest helpRequest[]
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?     @map("updated_at") @db.Timestamp(6)

  @@map("help_category")
}

model issueCategory {
  id               String             @id @default(cuid())
  name             String             @db.Text
  description      String?            @db.Text
  urbanIssueReport urbanIssueReport[]
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?          @map("updated_at") @db.Timestamp(6)

  @@map("issue_category")
}

model nutritionalCategory {
  id                String              @id @default(cuid())
  name              String              @db.Text
  description       String?             @db.Text
  nutritionalAdvice nutritionalAdvice[]
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?           @map("updated_at") @db.Timestamp(6)

  @@map("nutritional_category")
}

model programCategory {
  id                String              @id @default(cuid())
  name              String              @db.Text
  description       String?             @db.Text
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?           @map("updated_at") @db.Timestamp(6)
  cognitiveExercise cognitiveExercise[]
  exerciseProgram   exerciseProgram[]

  @@map("program_category")
}

model projectCategory {
  id          String    @id @default(cuid())
  name        String    @db.Text
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamp(6)

  collaborativeProject collaborativeProject[]

  @@map("project_category")
}

model resourceCategory {
  id          String     @id @default(cuid())
  name        String     @db.Text
  description String?    @db.Text
  resource    resource[]
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?  @map("updated_at") @db.Timestamp(6)

  @@map("resource_category")
}

model serviceCategory {
  id           String         @id @default(cuid())
  name         String         @db.Text
  description  String?        @db.Text
  localService localService[]
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime?      @map("updated_at") @db.Timestamp(6)

  @@map("service_category")
}

model skillCategory {
  id          String    @id @default(cuid())
  name        String    @db.Text
  description String?   @db.Text
  skill       skill[]
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamp(6)

  @@map("skill_category")
}

model wellnessCategory {
  id            String          @id @default(cuid())
  name          String          @db.Text
  description   String?         @db.Text
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?       @map("updated_at") @db.Timestamp(6)
  wellnessBadge wellnessBadge[]
  wellnessGoal  wellnessGoal[]

  @@map("wellness_category")
}
