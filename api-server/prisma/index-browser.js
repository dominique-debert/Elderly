
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  location: 'location',
  gpsCoordinates: 'gpsCoordinates',
  maxSpots: 'maxSpots',
  categoryId: 'categoryId',
  recurring: 'recurring',
  frequency: 'frequency',
  reducedMobilityAccess: 'reducedMobilityAccess',
  difficultyLevel: 'difficultyLevel',
  cost: 'cost',
  status: 'status',
  weatherRequirements: 'weatherRequirements',
  transportOptions: 'transportOptions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  actionType: 'actionType',
  description: 'description',
  ipAddress: 'ipAddress',
  device: 'device',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityRegistrationScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  userId: 'userId',
  registrationDate: 'registrationDate',
  status: 'status',
  attendanceConfirmed: 'attendanceConfirmed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId',
  description: 'description',
  icon: 'icon',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userBadgeId: 'userBadgeId'
};

exports.Prisma.CognitiveExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId',
  difficultyLevel: 'difficultyLevel',
  durationMinutes: 'durationMinutes',
  description: 'description',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CollaborativeProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  creatorId: 'creatorId',
  creationDate: 'creationDate',
  status: 'status',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  dateAdded: 'dateAdded',
  administrator: 'administrator',
  lastAccess: 'lastAccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId',
  difficultyLevel: 'difficultyLevel',
  adaptedForReducedMobility: 'adaptedForReducedMobility',
  durationMinutes: 'durationMinutes',
  description: 'description',
  videoLink: 'videoLink',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentCategoryId: 'parentCategoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumMessageScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  authorId: 'authorId',
  content: 'content',
  solutionMessage: 'solutionMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumTopicScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  authorId: 'authorId',
  title: 'title',
  pinned: 'pinned',
  status: 'status',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthIndicatorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recordingDate: 'recordingDate',
  stepCount: 'stepCount',
  sleepDurationMinutes: 'sleepDurationMinutes',
  sleepQuality: 'sleepQuality',
  weight: 'weight',
  moodId: 'moodId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MoodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  valence: 'valence',
  intensity: 'intensity',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HelpOfferScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  helperId: 'helperId',
  offerDate: 'offerDate',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HelpRequestScalarFieldEnum = {
  id: 'id',
  creatorId: 'creatorId',
  title: 'title',
  description: 'description',
  neededDate: 'neededDate',
  estimatedDuration: 'estimatedDuration',
  location: 'location',
  gpsCoordinates: 'gpsCoordinates',
  categoryId: 'categoryId',
  recurring: 'recurring',
  frequency: 'frequency',
  status: 'status',
  pointsOffered: 'pointsOffered',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocalServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId',
  address: 'address',
  gpsCoordinates: 'gpsCoordinates',
  phone: 'phone',
  website: 'website',
  description: 'description',
  hours: 'hours',
  seniorFriendly: 'seniorFriendly',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicationReminderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  medicationName: 'medicationName',
  dosage: 'dosage',
  morningReminderTime: 'morningReminderTime',
  noonReminderTime: 'noonReminderTime',
  eveningReminderTime: 'eveningReminderTime',
  nightReminderTime: 'nightReminderTime',
  daysOfWeek: 'daysOfWeek',
  instructions: 'instructions',
  active: 'active',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  label: 'label',
  icon: 'icon',
  key: 'key'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  content: 'content',
  sendDate: 'sendDate',
  type: 'type',
  read: 'read',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MunicipalEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  location: 'location',
  gpsCoordinates: 'gpsCoordinates',
  organizer: 'organizer',
  contact: 'contact',
  officialLink: 'officialLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  content: 'content',
  read: 'read',
  actionLink: 'actionLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferencesScalarFieldEnum = {
  userId: 'userId',
  messageNotification: 'messageNotification',
  activityNotification: 'activityNotification',
  helpNotification: 'helpNotification',
  forumNotification: 'forumNotification',
  emailNotification: 'emailNotification',
  smsNotification: 'smsNotification',
  pushNotification: 'pushNotification',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NutritionalAdviceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  categoryId: 'categoryId',
  season: 'season',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  joinDate: 'joinDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectTaskScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  creationDate: 'creationDate',
  dueDate: 'dueDate',
  status: 'status',
  assigneeId: 'assigneeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  categoryId: 'categoryId',
  authorId: 'authorId',
  adminValidated: 'adminValidated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SatisfactionSurveyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  refreshToken: 'refreshToken',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress'
};

exports.Prisma.ServiceCompletedScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  helperId: 'helperId',
  completionDate: 'completionDate',
  actualDuration: 'actualDuration',
  creatorComment: 'creatorComment',
  helperComment: 'helperComment',
  creatorRating: 'creatorRating',
  helperRating: 'helperRating',
  pointsExchanged: 'pointsExchanged',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceRatingScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  ratingDate: 'ratingDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SurveyResponseScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  userId: 'userId',
  responses: 'responses',
  responseDate: 'responseDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrustCircleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  dateAdded: 'dateAdded',
  accessLevel: 'accessLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrustedContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  relationship: 'relationship',
  shareMedications: 'shareMedications',
  shareHealthIndicators: 'shareHealthIndicators',
  shareWellnessActivities: 'shareWellnessActivities',
  emergencyAlerts: 'emergencyAlerts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UrbanIssueReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  categoryId: 'categoryId',
  description: 'description',
  address: 'address',
  gpsCoordinates: 'gpsCoordinates',
  reportDate: 'reportDate',
  status: 'status',
  cityReference: 'cityReference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  birthDate: 'birthDate',
  profession: 'profession',
  city: 'city',
  postalCode: 'postalCode',
  address: 'address',
  description: 'description',
  latitude: 'latitude',
  longitude: 'longitude',
  phone: 'phone',
  avatar: 'avatar',
  registrationDate: 'registrationDate',
  accountVerified: 'accountVerified',
  interfacePreferences: 'interfacePreferences',
  twoFactorAuthentication: 'twoFactorAuthentication',
  helpPoints: 'helpPoints',
  reducedMobility: 'reducedMobility',
  activityLevel: 'activityLevel',
  status: 'status',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  completionDate: 'completionDate',
  exerciseProgramId: 'exerciseProgramId',
  cognitiveExerciseId: 'cognitiveExerciseId',
  durationMinutes: 'durationMinutes',
  perceivedDifficultyLevel: 'perceivedDifficultyLevel',
  enjoymentLevel: 'enjoymentLevel',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  achievementDate: 'achievementDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserContactsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlockedContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactId: 'contactId',
  reason: 'reason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceType: 'deviceType',
  deviceName: 'deviceName',
  operatingSystem: 'operatingSystem',
  notificationToken: 'notificationToken',
  lastConnection: 'lastConnection',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  notificationMessages: 'notificationMessages',
  notificationForum: 'notificationForum',
  notificationActivities: 'notificationActivities',
  emailUpdates: 'emailUpdates',
  smsUpdates: 'smsUpdates',
  frequencyInstant: 'frequencyInstant',
  frequencyDaily: 'frequencyDaily',
  fontSize: 'fontSize',
  highContrast: 'highContrast',
  statusVisibilityEverybody: 'statusVisibilityEverybody',
  statusVisibilityFriends: 'statusVisibilityFriends',
  statusVisibilityNoOne: 'statusVisibilityNoOne',
  messagesFromEverybody: 'messagesFromEverybody',
  messagesFromFriends: 'messagesFromFriends',
  messagesFromNoOne: 'messagesFromNoOne',
  dataSharing: 'dataSharing',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserInterestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  interestId: 'interestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InterestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStatisticsScalarFieldEnum = {
  userId: 'userId',
  servicesProvided: 'servicesProvided',
  servicesReceived: 'servicesReceived',
  activitiesParticipated: 'activitiesParticipated',
  activitiesOrganized: 'activitiesOrganized',
  forumMessages: 'forumMessages',
  totalHelpPoints: 'totalHelpPoints',
  networkSize: 'networkSize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoCallScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  initiatorId: 'initiatorId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WellnessBadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  image: 'image',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WellnessGoalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  categoryId: 'categoryId',
  targetValue: 'targetValue',
  unit: 'unit',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WellnessGoalProgressScalarFieldEnum = {
  id: 'id',
  goalId: 'goalId',
  recordingDate: 'recordingDate',
  achievedValue: 'achievedValue',
  goalAchieved: 'goalAchieved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryChapterScalarFieldEnum = {
  id: 'id',
  chapterId: 'chapterId',
  chapterName: 'chapterName',
  chapterDescription: 'chapterDescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  description: 'description',
  typeId: 'typeId',
  chapterId: 'chapterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Valence = exports.$Enums.Valence = {
  positive: 'positive',
  negative: 'negative',
  neutre: 'neutre'
};

exports.Prisma.ModelName = {
  activity: 'activity',
  activityLog: 'activityLog',
  activityRegistration: 'activityRegistration',
  badge: 'badge',
  cognitiveExercise: 'cognitiveExercise',
  collaborativeProject: 'collaborativeProject',
  conversation: 'conversation',
  conversationParticipant: 'conversationParticipant',
  exerciseProgram: 'exerciseProgram',
  forumCategory: 'forumCategory',
  forumMessage: 'forumMessage',
  forumTopic: 'forumTopic',
  healthIndicator: 'healthIndicator',
  mood: 'mood',
  helpOffer: 'helpOffer',
  helpRequest: 'helpRequest',
  localService: 'localService',
  medicationReminder: 'medicationReminder',
  menuItem: 'menuItem',
  message: 'message',
  municipalEvent: 'municipalEvent',
  notification: 'notification',
  notificationPreferences: 'notificationPreferences',
  nutritionalAdvice: 'nutritionalAdvice',
  projectMember: 'projectMember',
  projectTask: 'projectTask',
  resource: 'resource',
  satisfactionSurvey: 'satisfactionSurvey',
  session: 'session',
  serviceCompleted: 'serviceCompleted',
  serviceRating: 'serviceRating',
  skill: 'skill',
  surveyResponse: 'surveyResponse',
  trustCircle: 'trustCircle',
  trustedContact: 'trustedContact',
  urbanIssueReport: 'urbanIssueReport',
  user: 'user',
  userActivity: 'userActivity',
  userBadge: 'userBadge',
  userContacts: 'userContacts',
  contactRequest: 'contactRequest',
  blockedContact: 'blockedContact',
  userDevice: 'userDevice',
  userPreferences: 'userPreferences',
  userInterest: 'userInterest',
  interest: 'interest',
  userSkill: 'userSkill',
  userStatistics: 'userStatistics',
  videoCall: 'videoCall',
  wellnessBadge: 'wellnessBadge',
  wellnessGoal: 'wellnessGoal',
  wellnessGoalProgress: 'wellnessGoalProgress',
  categoryType: 'categoryType',
  categoryChapter: 'categoryChapter',
  category: 'category'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
